import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
/**
 * @copyright   2016, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 * 
 */

import React from 'react';

var Matcher = function () {
  function Matcher(name, options) {
    var factory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, Matcher);

    if ("production" !== process.env.NODE_ENV) {
      if (!name || name.toLowerCase() === 'html') {
        throw new Error('The matcher name "' + name + '" is not allowed.');
      }
    }

    this.options = _extends({}, options);
    this.propName = name;
    this.inverseName = 'no' + (name.charAt(0).toUpperCase() + name.slice(1));
    this.factory = factory;
  }

  _createClass(Matcher, [{
    key: 'createElement',
    value: function createElement(match) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var element = null;

      if (typeof this.factory === 'function') {
        element = this.factory(match, props);
      } else {
        element = this.replaceWith(match, props);
      }

      if ("production" !== process.env.NODE_ENV) {
        if (typeof element !== 'string' && !React.isValidElement(element)) {
          throw new Error('Invalid React element created from ' + this.constructor.name + '.');
        }
      }

      return element;
    }
  }, {
    key: 'replaceWith',
    value: function replaceWith(match) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if ("production" !== process.env.NODE_ENV) {
        throw new Error(this.constructor.name + ' must return a React element.');
      }

      return match;
    }
  }, {
    key: 'asTag',
    value: function asTag() {
      if ("production" !== process.env.NODE_ENV) {
        throw new Error(this.constructor.name + ' must define the HTML tag name it will render.');
      }

      return '';
    }
  }, {
    key: 'match',
    value: function match(string) {
      if ("production" !== process.env.NODE_ENV) {
        throw new Error(this.constructor.name + ' must define a pattern matcher.');
      }
    }
  }, {
    key: 'doMatch',
    value: function doMatch(string, pattern, callback) {
      var matches = string.match(pattern instanceof RegExp ? pattern : new RegExp(pattern, 'i'));

      if (!matches) {
        return null;
      }

      return _extends({}, callback(matches), {
        match: matches[0]
      });
    }
  }, {
    key: 'onBeforeParse',
    value: function onBeforeParse(content, props) {
      return content;
    }
  }, {
    key: 'onAfterParse',
    value: function onAfterParse(content, props) {
      return content;
    }
  }]);

  return Matcher;
}();

export default Matcher;