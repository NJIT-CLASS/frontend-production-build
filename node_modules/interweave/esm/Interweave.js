import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
/**
 * @copyright   2016, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 * 
 */

import React from 'react';
import PropTypes from 'prop-types';
import Element from './Element';
import Parser from './Parser';
import Markup from './Markup';
import { FilterShape, MatcherShape } from './shapes';

var Interweave = function (_React$Component) {
  _inherits(Interweave, _React$Component);

  function Interweave() {
    _classCallCheck(this, Interweave);

    return _possibleConstructorReturn(this, (Interweave.__proto__ || Object.getPrototypeOf(Interweave)).apply(this, arguments));
  }

  _createClass(Interweave, [{
    key: 'parseMarkup',
    value: function parseMarkup() {
      var _this2 = this;

      var _props = this.props,
          tagName = _props.tagName,
          content = _props.content,
          emptyContent = _props.emptyContent,
          onBeforeParse = _props.onBeforeParse,
          onAfterParse = _props.onAfterParse,
          matchers = _props.matchers,
          disableMatchers = _props.disableMatchers,
          filters = _props.filters,
          disableFilters = _props.disableFilters,
          props = _objectWithoutProperties(_props, ['tagName', 'content', 'emptyContent', 'onBeforeParse', 'onAfterParse', 'matchers', 'disableMatchers', 'filters', 'disableFilters']);

      var allMatchers = disableMatchers ? [] : matchers;
      var allFilters = disableFilters ? [] : filters;
      var beforeCallbacks = onBeforeParse ? [onBeforeParse] : [];
      var afterCallbacks = onAfterParse ? [onAfterParse] : [];

      allMatchers.forEach(function (matcher) {
        if (matcher.onBeforeParse) {
          beforeCallbacks.push(matcher.onBeforeParse.bind(matcher));
        }

        if (matcher.onAfterParse) {
          afterCallbacks.push(matcher.onAfterParse.bind(matcher));
        }
      });

      var markup = beforeCallbacks.reduce(function (string, callback) {
        var nextString = callback(string, _this2.props);

        if ("production" !== process.env.NODE_ENV) {
          if (typeof nextString !== 'string') {
            throw new TypeError('Interweave `onBeforeParse` must return a valid HTML string.');
          }
        }

        return nextString;
      }, content || '');

      var parser = new Parser(markup, props, allMatchers, allFilters);

      var nodes = afterCallbacks.reduce(function (parserNodes, callback) {
        var nextNodes = callback(parserNodes, _this2.props);

        if ("production" !== process.env.NODE_ENV) {
          if (!Array.isArray(nextNodes)) {
            throw new TypeError('Interweave `onAfterParse` must return an array of strings and React elements.');
          }
        }

        return nextNodes;
      }, parser.parse());

      if (nodes.length === 0) {
        return emptyContent;
      }

      return nodes;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          disableLineBreaks = _props2.disableLineBreaks,
          disableWhitelist = _props2.disableWhitelist,
          emptyContent = _props2.emptyContent,
          noHtml = _props2.noHtml,
          noHtmlExceptMatchers = _props2.noHtmlExceptMatchers,
          tagName = _props2.tagName;


      return React.createElement(Markup, {
        disableLineBreaks: disableLineBreaks,
        disableWhitelist: disableWhitelist,
        emptyContent: emptyContent,
        noHtml: noHtml,
        noHtmlExceptMatchers: noHtmlExceptMatchers,
        tagName: tagName,
        parsedContent: this.parseMarkup()
      });
    }
  }]);

  return Interweave;
}(React.Component);

Interweave.propTypes = {
  commonClass: PropTypes.string,
  content: PropTypes.string,
  disableFilters: PropTypes.bool,
  disableLineBreaks: PropTypes.bool,
  disableMatchers: PropTypes.bool,
  disableWhitelist: PropTypes.bool,
  emptyContent: PropTypes.node,
  filters: PropTypes.arrayOf(FilterShape),
  matchers: PropTypes.arrayOf(MatcherShape),
  noHtml: PropTypes.bool,
  noHtmlExceptMatchers: PropTypes.bool,
  onAfterParse: PropTypes.func,
  onBeforeParse: PropTypes.func,
  transform: PropTypes.func,
  tagName: PropTypes.string
};
Interweave.defaultProps = {
  content: '',
  commonClass: 'interweave',
  disableFilters: false,
  disableLineBreaks: false,
  disableMatchers: false,
  disableWhitelist: false,
  emptyContent: null,
  filters: [],
  matchers: [],
  noHtml: false,
  noHtmlExceptMatchers: false,
  onAfterParse: null,
  onBeforeParse: null,
  transform: null,
  tagName: 'span'
};
export default Interweave;