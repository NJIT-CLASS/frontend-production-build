import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
/**
 * @copyright   2016, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 * 
 */

import React from 'react';
import PropTypes from 'prop-types';
import Element from './Element';
import Parser from './Parser';

var Markup = function (_React$PureComponent) {
  _inherits(Markup, _React$PureComponent);

  function Markup() {
    _classCallCheck(this, Markup);

    return _possibleConstructorReturn(this, (Markup.__proto__ || Object.getPrototypeOf(Markup)).apply(this, arguments));
  }

  _createClass(Markup, [{
    key: 'getContent',
    value: function getContent() {
      var _props = this.props,
          content = _props.content,
          noHtml = _props.noHtml,
          noHtmlExceptMatchers = _props.noHtmlExceptMatchers,
          disableLineBreaks = _props.disableLineBreaks,
          disableWhitelist = _props.disableWhitelist,
          emptyContent = _props.emptyContent,
          parsedContent = _props.parsedContent;


      if (parsedContent) {
        return parsedContent;
      }

      var markup = new Parser(content, {
        disableLineBreaks: disableLineBreaks,
        disableWhitelist: disableWhitelist,
        noHtml: noHtml,
        noHtmlExceptMatchers: noHtmlExceptMatchers
      }).parse();

      return markup.length ? markup : emptyContent;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          tagName = _props2.tagName,
          noHtml = _props2.noHtml,
          noHtmlExceptMatchers = _props2.noHtmlExceptMatchers;

      var className = noHtml || noHtmlExceptMatchers ? 'interweave--no-html' : '';
      var content = this.getContent();
      var tag = tagName;

      if (tag === 'fragment') {
        if (React.Fragment) {
          return React.createElement(
            React.Fragment,
            null,
            content
          );
        }

        tag = 'div';
      }

      return React.createElement(
        Element,
        { tagName: tag, className: className },
        content
      );
    }
  }]);

  return Markup;
}(React.PureComponent);

Markup.propTypes = {
  content: PropTypes.string,
  disableLineBreaks: PropTypes.bool,
  disableWhitelist: PropTypes.bool,
  emptyContent: PropTypes.node,
  noHtml: PropTypes.bool,
  noHtmlExceptMatchers: PropTypes.bool,
  parsedContent: PropTypes.node,
  tagName: PropTypes.oneOf(['span', 'div', 'p', 'fragment'])
};
Markup.defaultProps = {
  content: '',
  disableLineBreaks: false,
  disableWhitelist: false,
  emptyContent: null,
  noHtml: false,
  noHtmlExceptMatchers: false,
  parsedContent: null,
  tagName: 'span'
};
export default Markup;