import React from 'react';
import PropTypes from 'prop-types';
import { Matcher } from 'interweave';

declare module 'interweave' {
  declare export type AfterParseCallback = (content: React$Node[], props: Object) => React$Node[];

  declare export type BeforeParseCallback = (content: string, props: Object) => string;

  declare export interface FilterInterface {
    attribute(name: string, value: string): string,
    node(name: string, node: Node): Node,
  }

  declare export class Filter {
    attribute(name: string, value: string): string;
    node(name: string, node: Node): Node;
  }

  declare export interface MatcherInterface {
    inverseName: string,
    propName: string,
    asTag(): string,
    createElement(match: string, props?: Object): React$Node,
    match(value: string): ?MatchResponse,
    onBeforeParse(content: string, props: Object): string,
    onAfterParse(content: React$Node[], props: Object): React$Node[],
  }

  declare export type MatcherFactory = (match: string, props: Object) => React$Node;

  declare export type MatchCallback = (matches: string[]) => Object;

  declare export type MatchResponse = {
    match: string,
    [key: string]: string,
  };

  declare export class Matcher<T> {
    factory: ?MatcherFactory;
    inverseName: string;
    options: T;
    propName: string;
    constructor(name: string, options?: T, factory?: ?MatcherFactory): this;
    createElement(match: string, props?: Object): React$Node;
    replaceWith(match: string, props?: Object): React$Node;
    asTag(): string;
    match(string: string): ?MatchResponse;
    doMatch(string: string, pattern: string | RegExp, callback: MatchCallback): ?MatchResponse;
    onAfterParse(content: React$Node[], props: Object): React$Node[];
    onBeforeParse(content: string, props: Object): string;
  }

  declare export type MarkupProps = {
    content: string,
    disableLineBreaks: boolean,
    disableWhitelist: boolean,
    emptyContent: ?React$Node,
    noHtml: boolean,
    noHtmlExceptMatchers: boolean,
    tagName: string,
  };

  declare export class Markup extends React.Component<MarkupProps> {}

  declare export type InterweaveProps = {
    content: string,
    disableFilters: boolean,
    disableLineBreaks: boolean,
    disableMatchers: boolean,
    disableWhitelist: boolean,
    emptyContent: ?React$Node,
    filters: FilterInterface[],
    matchers: MatcherInterface[],
    noHtml: boolean,
    noHtmlExceptMatchers: boolean,
    onAfterParse: ?AfterParseCallback,
    onBeforeParse: ?BeforeParseCallback,
    tagName: string,
  };

  declare export default class Interweave extends React.Component<InterweaveProps> {
    parseMarkup(): React$Node[];
    render(): React$Node;
  }

  declare export var FilterShape: PropTypes;
  declare export var MatcherShape: PropTypes;
}
